swagger: '2.0'
info:
  title: 'Mechanic Shop API'
  description: 'API for managing a mechanic shop'
  version: 1.0.0
host: 'mechanic-shop-api.onrender.com'
schemes:
  - 'https'
consumes:
  - 'application/json'
produces:
  - 'application/json'

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

paths:

# Customers

  /customers/login:
    post:
      tags:
        - 'Customers'
      summary: 'Login endpoint'
      description: 'Validates customer login credentials, generates and returns a customer specific token'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Customer login credentials'
          required: true
          schema:
            $ref: '#/definitions/CustomerLogin'
      responses:
        '200':
          description: 'Login successful'
          schema:
            $ref: '#/definitions/LoginResponse'

  /customers:
    post:
      tags:
        - 'Customers'
      summary: 'Endpoint to create/register a new customer'
      description: 'Endpoint to create a new customer for our mechanic shop system, email and phone must be unique'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Information required to create a new customer'
          required: true
          schema:
            $ref: '#/definitions/CreateCustomerPayload'
      responses:
        '201':
          description: 'Customer created'
          schema:
            $ref: '#/definitions/CreateCustomerResponse'
          examples:
            application/json:
              id: 1
              name: 'John Doe'
              email: 'johnd@email.com'
              phone: '1234567890'
              password: 'password123'

    get:
      tags:
        - 'Customers'
      summary: 'Returns all customers'
      description: 'Endpoint to retrieve a list of all customers'
      responses:
        '200':
          description: 'Customers retrieved successfully'
          schema:
            $ref: '#/definitions/AllCustomers'

    put:
      tags:
        - 'Customers'
      summary: 'Endpoint to update a customer'
      description: 'Endpoint to update a customer, this is a token authenticated route, and the user must be logged in to update their information'
      security:
        - bearerAuth: []
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Information required to update a customer'
          required: true
          schema:
            $ref: '#/definitions/UpdateCustomerPayload'
      responses:
        '200':
          description: 'Customer updated'
          schema:
            $ref: '#/definitions/UpdateCustomerResponse'
          examples:
            application/json:
              id: 1
              name: 'Dohn Joe'
              email: 'dohnj@email.com'
              phone: '9876543210'
              password: 'password123'

    delete:
      tags:
        - 'Customers'
      summary: 'Endpoint to delete a customer'
      description: 'Endpoint to delete a customer.  Requires token authentication, customer must be logged in to delete their account'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Successfully deleted customer'
          schema:
            $ref: '#/definitions/DeleteCustomerResponse'
          examples:
            application/json:
              message: 'Successfully deleted customer <customer_id>'

  /customers/my-tickets:
    get:
      tags:
        - 'Customers'
      summary: 'Returns all service tickets for a customer'
      description: 'Endpoint to retrieve a list of all service tickets for a customer'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Service tickets retrieved successfully'
          schema:
            $ref: '#/definitions/GetCustomerTicketsResponse'

# Mechanics

  /mechanics/login:
    post:
      tags:
        - 'Mechanics'
      summary: 'Login endpoint'
      description: 'Validates mechanic login credentials, generates and returns a mechanic specific token'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Mechanic login credentials'
          required: true
          schema:
            $ref: '#/definitions/MechanicLogin'
      responses:
        '200':
          description: 'Login successful'
          schema:
            $ref: '#/definitions/LoginResponse'

  /mechanics/popular:
    get:
      tags:
        - 'Mechanics'
      summary: 'Returns the most popular mechanics'
      description: 'Endpoint to retrieve mechanics in order of number of tickets worked'
      responses:
        '200':
          description: 'Most popular mechanics retrieved successfully'
          schema:
            $ref: '#/definitions/PopularMechanicsResponse'

  /mechanics/search:
    get:
      tags:
        - 'Mechanics'
      summary: 'Search for mechanics'
      description: 'Endpoint to search for mechanics by name'
      parameters:
        - in: 'query'
          name: 'name'
          description: 'Name of mechanic to search for'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'Mechanics retrieved successfully'
          schema:
            $ref: '#/definitions/SearchMechanicsResponse'

  /mechanics:
    post:
      tags:
        - 'Mechanics'
      summary: 'Endpoint to create/register a new mechanic'
      description: 'Endpoint to create a new mechanic for our mechanic shop system, email and phone must be unique'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Information required to create a new mechanic'
          required: true
          schema:
            $ref: '#/definitions/CreateMechanicPayload'
      responses:
        '201':
          description: 'Mechanic created'
          schema:
            $ref: '#/definitions/CreateMechanicResponse'
          examples:
            application/json:
              id: 1
              name: 'John Doe'
              email: 'jdoe@email.com'
              phone: '1234567890'
              salary: 1000.00
              password: 'password123'

    get:
      tags:
        - 'Mechanics'
      summary: 'Returns all mechanics'
      description: 'Endpoint to retrieve a list of all mechanics'
      responses:
        '200':
          description: 'Mechanics retrieved successfully'
          schema:
            $ref: '#/definitions/AllMechanics'

    put:
      tags:
        - 'Mechanics'
      summary: 'Endpoint to update a mechanic'
      description: 'Endpoint to update a mechanic, this is a token authenticated route, and the user must be logged in to update their information'
      security:
        - bearerAuth: []
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Information required to update a mechanic'
          required: true
          schema:
            $ref: '#/definitions/UpdateMechanicPayload'
      responses:
        '200':
          description: 'Mechanic updated'
          schema:
            $ref: '#/definitions/UpdateMechanicResponse'
          examples:
            application/json:
              id: 1
              name: 'Dohn Joe'
              email: 'djoe@email.com'
              phone: '9876543210'
              salary: 2000.00
              password: 'password123'

    delete:
      tags:
        - 'Mechanics'
      summary: 'Endpoint to delete a mechanic'
      description: 'Endpoint to delete a mechanic.  Requires token authentication, mechanic must be logged in to delete their account'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Successfully deleted mechanic'
          schema:
            $ref: '#/definitions/DeleteMechanicResponse'
          examples:
            application/json:
              message: 'Successfully deleted mechanic <mechanic_id>'

# Parts

  /parts:
    post:
      tags:
        - 'Parts'
      summary: 'Endpoint to create a new part'
      description: 'Endpoint to create a new part for our mechanic shop system'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Information required to create a new part'
          required: true
          schema:
            $ref: '#/definitions/CreatePartPayload'
      responses:
        '201':
          description: 'Part created'
          schema:
            $ref: '#/definitions/CreatePartResponse'
          examples:
            application/json:
              id: 1
              name: 'Engine'
              price: 1000.00
              quantity: 10

    get:
      tags:
        - 'Parts'
      summary: 'Returns all parts'
      description: 'Endpoint to retrieve a list of all parts'
      responses:
        '200':
          description: 'Parts retrieved successfully'
          schema:
            $ref: '#/definitions/AllParts'

  /parts/{part_id}:
    put:
      tags:
        - 'Parts'
      summary: 'Endpoint to update a part'
      description: 'Endpoint to update a part'
      parameters:
        - in: 'path'
          name: 'part_id'
          description: 'ID of part to update'
          required: true
          type: 'integer'
        - in: 'body'
          name: 'body'
          description: 'Information required to update a part'
          required: true
          schema:
            $ref: '#/definitions/UpdatePartPayload'
      responses:
        '200':
          description: 'Part updated'
          schema:
            $ref: '#/definitions/UpdatePartResponse'
          examples:
            application/json:
              id: 1
              name: 'Engine'
              price: 1000.00
              quantity: 5

    delete:
      tags:
        - 'Parts'
      summary: 'Endpoint to delete a part'
      description: 'Endpoint to delete a part'
      parameters:
        - in: 'path'
          name: 'part_id'
          description: 'ID of part to delete'
          required: true
          type: 'integer'
      responses:
        '200':
          description: 'Successfully deleted part'
          schema:
            $ref: '#/definitions/DeletePartResponse'
          examples:
            application/json:
              message: 'Successfully deleted part <part_id>'

  /parts/{part_id}/service_tickets:
    get:
      tags:
        - 'Parts'
      summary: 'Returns all service tickets for a part'
      description: 'Endpoint to retrieve a list of all service tickets for a part'
      parameters:
        - in: 'path'
          name: 'part_id'
          description: 'ID of part to retrieve service tickets for'
          required: true
          type: 'integer'
      responses:
        '200':
          description: 'Service tickets retrieved successfully'
          schema:
            $ref: '#/definitions/GetPartTicketsResponse'

# Service Tickets

  /service_tickets:
    post:
      tags:
        - 'Service Tickets'
      summary: 'Endpoint to create a new service ticket'
      description: 'Endpoint to create a new service ticket for our mechanic shop system'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Information required to create a new service ticket'
          required: true
          schema:
            $ref: '#/definitions/CreateServiceTicketPayload'
      responses:
        '201':
          description: 'Service ticket created'
          schema:
            $ref: '#/definitions/CreateServiceTicketResponse'
          examples:
            application/json:
              id: 1
              VIN: '1234567890'
              service_date: '2020-01-01'
              service_desc: 'Oil change'
              customer_id: 1
              mechanic_ids: [1, 2]

    get:
      tags:
        - 'Service Tickets'
      summary: 'Returns all service tickets'
      description: 'Endpoint to retrieve a list of all service tickets'
      responses:
        '200':
          description: 'Service tickets retrieved successfully'
          schema:
            $ref: '#/definitions/AllServiceTickets'

  /service_tickets/{service_ticket_id}:
    get:
      tags:
        - 'Service Tickets'
      summary: 'Returns a service ticket by ID'
      description: 'Endpoint to retrieve a service ticket by ID'
      parameters:
        - in: 'path'
          name: 'service_ticket_id'
          description: 'ID of service ticket to retrieve'
          required: true
          type: 'integer'
      responses:
        '200':
          description: 'Service ticket retrieved successfully'
          schema:
            $ref: '#/definitions/OneServiceTicket'

    delete:
      tags:
        - 'Service Tickets'
      summary: 'Endpoint to delete a service ticket'
      description: 'Endpoint to delete a service ticket'
      parameters:
        - in: 'path'
          name: 'service_ticket_id'
          description: 'ID of service ticket to delete'
          required: true
          type: 'integer'
      responses:
        '200':
          description: 'Successfully deleted service ticket'
          schema:
            $ref: '#/definitions/DeleteServiceTicketResponse'
          examples:
            application/json:
              message: 'Successfully deleted service ticket <service_ticket_id>'

  /service_tickets/{service_ticket_id}/edit/mechanics:
    put:
      tags:
        - 'Service Tickets'
      summary: 'Endpoint to edit mechanics on a service ticket'
      description: 'Endpoint to add and remove mechanics on a service ticket'
      parameters:
        - in: 'path'
          name: 'service_ticket_id'
          description: 'ID of service ticket to edit mechanics on'
          required: true
          type: 'integer'
        - in: 'body'
          name: 'body'
          description: 'Information required to edit mechanics to a service ticket'
          required: true
          schema:
            $ref: '#/definitions/ServiceTicketEditMechanicsPayload'
      responses:
        '200':
          description: 'Mechanics edited on service ticket'
          schema:
            $ref: '#/definitions/ServiceTicketEditMechanicsResponse'

  /service_tickets/{service_ticket_id}/edit/parts:
    put:
      tags:
        - 'Service Tickets'
      summary: 'Endpoint to add a part to a service ticket'
      description: 'Endpoint to add a part to a service ticket'
      parameters:
        - in: 'path'
          name: 'service_ticket_id'
          description: 'ID of service ticket to add a part to'
          required: true
          type: 'integer'
        - in: 'body'
          name: 'body'
          description: 'Information required to edit parts to a service ticket'
          required: true
          schema:
            $ref: '#/definitions/ServiceTicketEditPartsPayload'
      responses:
        '200':
          description: 'Parts edited on service ticket'
          schema:
            $ref: '#/definitions/ServiceTicketEditPartsResponse'

# =================================================================================================

definitions:

# Customers

  CustomerLogin:
    type: 'object'
    properties:
      email:
        type: 'string'
      password:
        type: 'string'

    required:
      - 'email'
      - 'password'

  LoginResponse:
    type: 'object'
    properties:
      token:
        type: 'string'
      message:
        type: 'string'
      status:
        type: 'string'

  CreateCustomerPayload:
    type: 'object'
    properties:
      name:
        type: 'string'
      email:
        type: 'string'
      phone:
        type: 'string'
      password:
        type: 'string'

    required:
      - 'name'
      - 'email'
      - 'phone'
      - 'password'

  CreateCustomerResponse:
    type: 'object'
    properties:
      id:
        type: 'integer'
      name:
        type: 'string'
      email:
        type: 'string'
      phone:
        type: 'string'
      password:
        type: 'string'

  AllCustomers:
    type: 'array'
    items:
      type: 'object'
      properties:
        id:
          type: 'integer'
        name:
          type: 'string'
        email:
          type: 'string'
        phone:
          type: 'string'
        password:
          type: 'string'

  UpdateCustomerPayload:
    type: 'object'
    properties:
      name:
        type: 'string'
      email:
        type: 'string'
      phone:
        type: 'string'
      password:
        type: 'string'

    required:
      - 'name'
      - 'email'
      - 'phone'
      - 'password'

  UpdateCustomerResponse:
    type: 'object'
    properties:
      id:
        type: 'integer'
      name:
        type: 'string'
      email:
        type: 'string'
      phone:
        type: 'string'
      password:
        type: 'string'

  DeleteCustomerResponse:
    type: 'object'
    properties:
      message:
        type: 'string'


# Mechanics

  MechanicLogin:
    type: 'object'
    properties:
      email:
        type: 'string'
      password:
        type: 'string'

    required:
      - 'email'
      - 'password'

  PopularMechanicsResponse:
    type: 'array'
    items:
      type: 'object'
      properties:
        id:
          type: 'integer'
        name:
          type: 'string'
        email:
          type: 'string'
        phone:
          type: 'string'
        salary:
          type: 'number'
          format: 'float'
        password:
          type: 'string'

  SearchMechanicsResponse:
    PopularMechanicsResponse:
    type: 'array'
    items:
      type: 'object'
      properties:
        id:
          type: 'integer'
        name:
          type: 'string'
        email:
          type: 'string'
        phone:
          type: 'string'
        salary:
          type: 'number'
          format: 'float'
        password:
          type: 'string'

  CreateMechanicPayload:
    type: 'object'
    properties:
      name:
        type: 'string'
      email:
        type: 'string'
      phone:
        type: 'string'
      salary:
        type: 'number'
        format: 'float'
      password:
        type: 'string'

    required:
      - 'name'
      - 'email'
      - 'phone'
      - 'salary'
      - 'password'

  CreateMechanicResponse:
    type: 'object'
    properties:
      id:
        type: 'integer'
      name:
        type: 'string'
      email:
        type: 'string'
      phone:
        type: 'string'
      salary:
        type: 'number'
        format: 'float'
      password:
        type: 'string'

  AllMechanics:
    type: 'array'
    items:
      type: 'object'
      properties:
        id:
          type: 'integer'
        name:
          type: 'string'
        email:
          type: 'string'
        phone:
          type: 'string'
        salary:
          type: 'number'
          format: 'float'
        password:
          type: 'string'

  UpdateMechanicPayload:
    type: 'object'
    properties:
      name:
        type: 'string'
      email:
        type: 'string'
      phone:
        type: 'string'
      salary:
        type: 'number'
        format: 'float'
      password:
        type: 'string'

    required:
      - 'name'
      - 'email'
      - 'phone'
      - 'salary'
      - 'password'

  UpdateMechanicResponse:
    type: 'object'
    properties:
      id:
        type: 'integer'
      name:
        type: 'string'
      email:
        type: 'string'
      phone:
        type: 'string'
      salary:
        type: 'number'
        format: 'float'
      password:
        type: 'string'

  DeleteMechanicResponse:
    type: 'object'
    properties:
      message:
        type: 'string'


# Parts

  CreatePartPayload:
    type: 'object'
    properties:
      name:
        type: 'string'
      price:
        type: 'number'
        format: 'float'
      quantity:
        type: 'integer'

    required:
      - 'name'
      - 'price'
      - 'quantity'

  CreatePartResponse:
    type: 'object'
    properties:
      id:
        type: 'integer'
      name:
        type: 'string'
      price:
        type: 'number'
        format: 'float'
      quantity:
        type: 'integer'

  AllParts:
    type: 'array'
    items:
      type: 'object'
      properties:
        id:
          type: 'integer'
        name:
          type: 'string'
        price:
          type: 'number'
          format: 'float'
        quantity:
          type: 'integer'

  UpdatePartPayload:
    type: 'object'
    properties:
      name:
        type: 'string'
      price:
        type: 'number'
        format: 'float'
      quantity:
        type: 'integer'

    required:
      - 'name'
      - 'price'
      - 'quantity'

  UpdatePartResponse:
    type: 'object'
    properties:
      id:
        type: 'integer'
      name:
        type: 'string'
      price:
        type: 'number'
        format: 'float'
      quantity:
        type: 'integer'

  DeletePartResponse:
    type: 'object'
    properties:
      message:
        type: 'string'


# Service Tickets

  CreateServiceTicketPayload:
    type: 'object'
    properties:
      VIN:
        type: 'string'
      service_date:
        type: 'string'
      service_desc:
        type: 'string'
      customer_id:
        type: 'integer'
      mechanic_ids:
        type: 'array'
        items:
          type: 'integer'

    required:
      - 'VIN'
      - 'service_date'
      - 'customer_id'

  CreateServiceTicketResponse:
    type: 'object'
    properties:
      id:
        type: 'integer'
      VIN:
        type: 'string'
      service_date:
        type: 'string'
      service_desc:
        type: 'string'
      customer_id:
        type: 'integer'
      mechanic_ids:
        type: 'array'
        items:
          type: 'integer'

  AllServiceTickets:
    type: 'array'
    items:
      type: 'object'
      properties:
        id:
          type: 'integer'
        VIN:
          type: 'string'
        service_date:
          type: 'string'
        service_desc:
          type: 'string'
        customer_id:
          type: 'integer'
        mechanic_ids:
          type: 'array'
          items:
            type: 'integer'
        parts:
          type: 'array'
          items:
            type: 'object'
            properties:
              id:
                type: 'integer'
              name:
                type: 'string'
              price:
                type: 'number'
                format: 'float'
              quantity:
                type: 'integer'

  OneServiceTicket:
    type: 'object'
    properties:
      id:
        type: 'integer'
      VIN:
        type: 'string'
      service_date:
        type: 'string'
      service_desc:
        type: 'string'
      customer_id:
        type: 'integer'
      mechanic_ids:
        type: 'array'
        items:
          type: 'integer'
      parts:
        type: 'array'
        items:
          type: 'object'
          properties:
            id:
              type: 'integer'
            name:
              type: 'string'
            price:
              type: 'number'
              format: 'float'
            quantity:
              type: 'integer'

  DeleteServiceTicketResponse:
    type: 'object'
    properties:
      message:
        type: 'string'

  GetCustomerTicketsResponse:
    type: 'array'
    items:
      type: 'object'
      properties:
        id:
          type: 'integer'
        VIN:
          type: 'string'
        service_date:
          type: 'string'
        service_desc:
          type: 'string'
        customer_id:
          type: 'integer'
        mechanic_ids:
          type: 'array'
          format: 'integer'
        parts:
          type: 'array'
          items:
            type: 'object'
            properties:
              id:
                type: 'integer'
              name:
                type: 'string'
              price:
                type: 'number'
                format: 'float'
              quantity:
                type: 'integer'

  GetPartTicketsResponse:
    type: 'array'
    items:
      type: 'object'
      properties:
        id:
          type: 'integer'
        VIN:
          type: 'string'
        service_date:
          type: 'string'
        service_desc:
          type: 'string'
        customer_id:
          type: 'integer'
        mechanic_ids:
          type: 'array'
          format: 'integer'
        parts:
          type: 'array'
          items:
            type: 'object'
            properties:
              id:
                type: 'integer'
              name:
                type: 'string'
              price:
                type: 'number'
                format: 'float'
              quantity:
                type: 'integer'

  ServiceTicketEditMechanicsPayload:
    type: 'object'
    properties:
      add_mechanic_ids:
        type: 'array'
        items:
          type: 'integer'
      remove_mechanic_ids:
        type: 'array'
        items:
          type: 'integer'

    required:
      - 'add_mechanic_ids'
      - 'remove_mechanic_ids'

  ServiceTicketEditMechanicsResponse:
    type: 'object'
    properties:
      id:
        type: 'integer'
      VIN:
        type: 'string'
      service_date:
        type: 'string'
      service_desc:
        type: 'string'
      customer:
        type: 'object'
        properties:
          id:
            type: 'integer'
          name:
            type: 'string'
          email:
            type: 'string'
          phone:
            type: 'string'
          password:
            type: 'string'
      customer_id:
        type: 'integer'
      mechanics:
        type: 'array'
        items:
          type: 'object'
          properties:
            id:
              type: 'integer'
            name:
              type: 'string'
            email:
              type: 'string'
            phone:
              type: 'string'
            salary:
              type: 'number'
              format: 'float'
            password:
              type: 'string'
      parts:
          type: 'array'
          items:
            type: 'object'
            properties:
              id:
                type: 'integer'
              name:
                type: 'string'
              price:
                type: 'number'
                format: 'float'
              quantity:
                type: 'integer'

  ServiceTicketEditPartsPayload:
    type: 'object'
    properties:
      part_id:
        type: 'integer'
      quantity:
        type: 'integer'

    required:
      - 'part_id'
      - 'quantity'

  ServiceTicketEditPartsResponse:
    type: 'object'
    properties:
      message:
        type: 'string'